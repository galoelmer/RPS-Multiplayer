$(function () {

    // Stores random ID generated by database
    var myUserId = "";
    var remoteUserId = "";

    //Create reference to connected users database
    var myUserRef;
    var remoteUserRef;

    // Get database reference to all connected users
    // All connections will be stored in this directory
    var onlineUsersRef = database.ref("/onlineUsersList");

    // '.info/connected' is a boolean value, true if users are connected and false if they are not.
    var connectedRef = database.ref(".info/connected");

    // When the users' connection state changes...
    connectedRef.on("value", function (snapshot) {

        // If they are connected..
        if (snapshot.val()) {

            // Add user to the user connections list.
            var onlineUser = onlineUsersRef.push({
                score: 0,
                choice: "",
                name: "Anonymous"
            });

            // Gets random id generated by database
            myUserId = onlineUser.key;

            // Gets my User database reference
            myUserRef = onlineUsersRef.child(myUserId);

            // Remove user from the connection list when they disconnect.
            onlineUser.onDisconnect().remove();
        }
    });

    var remoteUserName = "Anonymous";

    // Set a maximum number of players to two. Other user are able to connect, but
    // they are no able to play. Only the first two user connections are allow to play.
    onlineUsersRef.limitToFirst(2).on("value", function (snapshot) {

        // Loop through connected-users-list and compares each other IDs to
        // identified the second connection user
        snapshot.forEach(function (user) {

            // If myUserID is different to user.key(id) then
            // the second player is log
            if (user.key != myUserId && remoteUserId == "") {
                showStatusMessage("online", user.val().name);
                //Gets second player Id from database
                remoteUserId = user.key;

                //Gets second player database reference
                remoteUserRef = onlineUsersRef.child(remoteUserId);
            }
        });
    });

    // Add click event to ROCK, PAPER, SCISSORS' icons and
    // updates the users database choice with
    // the data attribute value stored in each icon tag
    $("[data-choice]").on("click", function () {

        $(this).addClass("selected-icon-color");
        $(this).siblings().removeClass("selected-icon-color");
        $(this).siblings().addClass("icon-color");

        myUserRef.update({
            choice: $(this).attr("data-choice")
        });
    });

    // Event listens to any changes in onlineUsersList
    onlineUsersRef.on("value", function (snapshot) {

        // Store my user player choice (rock, paper, scissor)
        var myChoice = snapshot.child(myUserId).val().choice;

        // Check if remote user id exist and checks if both players have made their choice, if all true then a function to check who wins is call
        if (remoteUserId && myChoice) {
            showStatusMessage("choice", snapshot.child(remoteUserId).val().name, myChoice);

            // Store remote player choice (rock, paper, scissor)
            var remotePlayerChoice = snapshot.child(remoteUserId).val().choice;

            if (remotePlayerChoice) {
                checkWinner(myChoice, remotePlayerChoice, snapshot.child(remoteUserId).val().name);
            }
        }
    });

    // Update UI scores and players' names
    onlineUsersRef.on("value", function (snapshot) {

        if (remoteUserId) {

            $("#myScore").text(snapshot.child(myUserId).val().score);
            $("#remoteUserScore").text(snapshot.child(remoteUserId).val().score);
            $("#remoteUserName").text(snapshot.child(remoteUserId).val().name);
            remoteUserName = snapshot.child(remoteUserId).val().name;
        }

        $("#myUserName").text(snapshot.child(myUserId).val().name);
    });

    var score = 0;

    // Functions compares players choice between rock, paper, scissors and
    // choose the the winner hand
    function checkWinner(myChoice, remotePlayerChoice, remotePlayerName) {

        if (myChoice == remotePlayerChoice) {
            showStatusMessage("tie", remotePlayerName, myChoice, "");
            scoreDatabaseUpdate();
        }
        else if (myChoice == "rock" && remotePlayerChoice == "scissors") {
            showStatusMessage("win", remotePlayerName, myChoice, remotePlayerChoice);
            score++;
            scoreDatabaseUpdate();
        }
        else if (myChoice == "paper" && remotePlayerChoice == "rock") {
            console.log("You win PAPER");
            showStatusMessage("win", remotePlayerName, myChoice, remotePlayerChoice);
            score++;
            scoreDatabaseUpdate();
        }
        else if (myChoice == "scissors" && remotePlayerChoice == "paper") {
            showStatusMessage("win", remotePlayerName, myChoice, remotePlayerChoice);
            score++;
            scoreDatabaseUpdate();
        } else {
            showStatusMessage("lose", remotePlayerName, myChoice, remotePlayerChoice);
            scoreDatabaseUpdate();
        }
    }

    // Function updates score database value and clears players choices
    function scoreDatabaseUpdate() {
        myUserRef.update({
            score: score,
            choice: ""
        });
        remoteUserRef.update({
            choice: ""
        });
        $(".hand.icon").removeClass("selected-icon-color");
    }

    // After remote player disconnects, reset remote user id and clear
    // my user database data
    onlineUsersRef.on("child_removed", function (snapshot) {

        // Reset only when remote user disconnects and not when
        // other users disconnect
        if (snapshot.key == remoteUserId) {
            showStatusMessage("offline", remoteUserName);
            score = 0;
            remoteUserId = "";
            myUserRef.update({
                score: 0
            });
        }
    });

    var userName = "Anonymous";
    // Prevent more than two online users play the game
    onlineUsersRef.once("value", function (snapshot) {
        if (snapshot.numChildren() < 3) {

            // Modal shows input-name form before game starts
            $('.tiny.modal').modal('show');

            $(".ui.submit.button").click(function () {

                userName = $("#userName").val() || "Anonymous";

                // Update player's name in the database
                myUserRef.update({
                    name: userName
                });
                $('.tiny.modal').modal('hide');
            });

        } else {
            $(".container").remove();
            // Modal shows message to users when they are not able to play the game
            $('.basic.modal').modal('show');
        }
    });

    //Create reference to database chats
    var chatRef = database.ref("/chats");

    // Event triggers on every new message added to database
    chatRef.on("child_added", function (snapshot) {

        // Create paragraph element with message text from database
        // and append to HTML tag
        var p = $("<p>").text(snapshot.val().name + ": " + snapshot.val().message);
        $("#chatMessages").prepend(p);
        chatRef.remove();
    });

    // Add event listener to chat send button 
    $("#chatSendButton").on("click", function () {

        // Push new message to chats database
        var message = $("#userMessage").val();
        chatRef.push({
            message: message,
            name: userName
        });

        $("#userMessage").val("");
    });

    function showStatusMessage(keyword, remotePlayerName, hand, remotePlayerChoice) {

        switch (keyword) {
            case "offline":
                $("#gameReport").empty();
                $("#gameReport").append("<p>" + remotePlayerName + " left the game</p><p>Waiting on other player...</p>");
                break;
            case "online":
                $("#gameReport").empty();
                $("#gameReport").append("<p>You playing against " + remotePlayerName + "</p><p>Pick a hand to start playing</p>");
                break;
            case "choice":
                $("#gameReport").empty();
                $("#gameReport").append("<p>You chose " + hand + "</p><p>Waiting on " + remotePlayerName + " to make a choice...</p>");
                break;
            case "win":
                $("#gameReport").empty();
                $("#gameReport").append("<p>Your " + hand + " beats " + remotePlayerName + "'s " + remotePlayerChoice + "</p><p>Play Again</p>");
                break;
            case "lose":
                $("#gameReport").empty();
                $("#gameReport").append("<p>Your " + hand + " loses against " + remotePlayerName + "'s " + remotePlayerChoice + "</p><p>Play Again</p>");
                break;
            case "tie":
                $("#gameReport").empty();
                $("#gameReport").append("<p>It's a Tie, you both chose the same hand</p><p>Play Again</p>");
                break;
        }
    }
});
